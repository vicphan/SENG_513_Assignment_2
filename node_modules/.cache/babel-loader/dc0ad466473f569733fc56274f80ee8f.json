{"ast":null,"code":"var _jsxFileName = \"/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_2/src/pages/components/game.js\";\nimport Board from \"./board\";\nimport React from \"react\";\nimport Button from \"./button_with_text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player_color = [\"blue\", \"green\", \"red\"];\n    this.state = {\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0)\n    };\n  }\n  calculateBoxFilled(board, index) {\n    const winning_indices = [[0, 3, 4, 7], [1, 4, 5, 8], [2, 5, 6, 9], [7, 10, 11, 14], [8, 11, 12, 15], [9, 12, 13, 16], [14, 17, 18, 21], [15, 18, 19, 22], [16, 19, 20, 23]];\n    let indices = [];\n    for (let i = 0; i < winning_indices.length; i++) {\n      if (winning_indices[i].includes(index)) {\n        for (let j = 0; j < winning_indices[i].length; j++) {\n          if (board[winning_indices[i][j]] === null) {\n            return null;\n          }\n        }\n        indices.push(i);\n      }\n    }\n    return indices;\n  }\n  handleClick(i) {\n    if (this.state.board.at(i) !== null || this.state.step > 24) {\n      return;\n    }\n    const color = this.player_color[this.state.player_turn - 1];\n    this.changeLineColor(i, color);\n    let board = this.state.board.slice();\n    let score = this.state.score.slice();\n    board[i] = this.state.player_turn;\n    const step = this.state.step + 1;\n    const box_filled = this.calculateBoxFilled(board, i);\n    let player_turn = this.state.player_turn;\n    if (box_filled !== null) {\n      this.displayBoxColor(box_filled, color);\n      score[this.state.player_turn - 1] += 1;\n    } else {\n      player_turn = this.state.player_turn + 1;\n      if (player_turn % 4 === 0) {\n        player_turn = 1;\n      }\n    }\n    this.setState({\n      player_turn: player_turn,\n      step: step,\n      board: board,\n      score: score\n    });\n    this.props.changePlayerTurn(player_turn);\n    this.props.updateScore(score);\n  }\n  displayLineColor(color) {\n    let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n    let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n    let style = document.createElement('style');\n    style.appendChild(document.createTextNode(css_h_line));\n    style.appendChild(document.createTextNode(css_v_line));\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n  displayBoxColor(indices, color) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (document.getElementById(\"empty_box_\" + index)) {\n        document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n      } else {\n        let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n        let style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n    }\n  }\n  resetBoxColors() {\n    for (let i = 0; i < 9; i++) {\n      this.displayBoxColor(i, \"black\");\n    }\n  }\n  changeLineColor(index, color) {\n    document.getElementById(\"line_\" + index).style.backgroundColor = color;\n  }\n  resetLineColors() {\n    for (let i = 0; i < 24; i++) {\n      document.getElementById(\"line_\" + i).style.backgroundColor = null;\n    }\n  }\n  calculateWinner() {\n    const score = this.state.score;\n    const allEqual = score.every((val, i, arr) => val === arr[0]);\n    if (allEqual) {\n      return \"Game over! It's a tie!\";\n    } else {\n      const [one, two, three] = score;\n      if (one === two && one > three) {\n        return \"Game over! Player 1 & 2 are tied!\";\n      } else if (two === three && two > one) {\n        return \"Game over! Player 2 & 3 are tied!\";\n      } else if (one === three && one > two) {\n        return \"Game over! Player 1 & 3 are tied!\";\n      } else {\n        let winner = score.indexOf(Math.max(...score)) + 1;\n        return \"Game over! Player \" + winner + \" wins!\";\n      }\n    }\n  }\n  restartGame() {\n    this.setState({\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0)\n    });\n    this.resetLineColors();\n    this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n    this.resetBoxColors();\n  }\n  render() {\n    let status = \"Player turn: \" + this.state.player_turn;\n    if (this.state.step > 24) {\n      status = this.calculateWinner();\n    }\n    this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n    const empty_box_ids = [[\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"], [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"], [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        text: \"Restart Game\",\n        onClick: this.restartGame.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        empty_box_ids: empty_box_ids,\n        handleClick: this.handleClick.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;","map":{"version":3,"names":["Board","React","Button","Game","Component","constructor","props","player_color","state","player_turn","step","board","Array","fill","score","calculateBoxFilled","index","winning_indices","indices","i","length","includes","j","push","handleClick","at","color","changeLineColor","slice","box_filled","displayBoxColor","setState","changePlayerTurn","updateScore","displayLineColor","css_h_line","css_v_line","style","document","createElement","appendChild","createTextNode","getElementsByTagName","getElementById","backgroundColor","css","resetBoxColors","resetLineColors","calculateWinner","allEqual","every","val","arr","one","two","three","winner","indexOf","Math","max","restartGame","render","status","empty_box_ids","bind"],"sources":["/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_2/src/pages/components/game.js"],"sourcesContent":["import Board from \"./board\";\nimport React from \"react\";\nimport Button from \"./button_with_text\";\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.player_color = [\"blue\", \"green\", \"red\"];\n        this.state = {\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0)\n        }\n    }\n\n    calculateBoxFilled(board, index) {\n        const winning_indices = [\n            [0, 3, 4, 7],\n            [1, 4, 5, 8],\n            [2, 5, 6, 9],\n            [7, 10, 11, 14],\n            [8, 11, 12, 15],\n            [9, 12, 13, 16],\n            [14, 17, 18, 21],\n            [15, 18, 19, 22],\n            [16, 19, 20, 23]\n        ]\n\n        let indices = [];\n    \n        for (let i = 0; i< winning_indices.length; i++){\n            if (winning_indices[i].includes(index)){\n                for (let j = 0; j< winning_indices[i].length; j++){\n                    if (board[winning_indices[i][j]] === null){\n                        return null;\n                    }\n                }\n                indices.push(i);\n            }\n        }\n\n        return indices;\n    }\n\n    handleClick(i){\n        if (this.state.board.at(i) !== null || this.state.step > 24){\n            return;\n        }\n        const color = this.player_color[this.state.player_turn-1]\n        this.changeLineColor(i, color);\n        let board = this.state.board.slice();\n        let score = this.state.score.slice();\n        board[i] = this.state.player_turn;\n        const step = this.state.step +1;\n        const box_filled = this.calculateBoxFilled(board, i);\n        let player_turn = this.state.player_turn;\n        if (box_filled !== null){\n            this.displayBoxColor(box_filled, color);\n            score[this.state.player_turn-1] += 1;\n        }\n        else{\n            player_turn = this.state.player_turn + 1;\n            if (player_turn % 4 === 0){\n                player_turn = 1;\n            }\n            \n        }\n        this.setState({\n            player_turn: player_turn,\n            step: step,\n            board: board,\n            score: score\n        }\n        )\n        this.props.changePlayerTurn(player_turn);\n        this.props.updateScore(score);\n    }\n\n    displayLineColor(color){\n        let css_h_line = \".h_line:hover{ background-color: \"+ color + \" }\";\n        let css_v_line = \".v_line:hover{ background-color: \"+ color + \" }\";\n        \n        let style = document.createElement('style');\n\n        style.appendChild(document.createTextNode(css_h_line));\n        style.appendChild(document.createTextNode(css_v_line));\n\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    displayBoxColor(indices, color){\n        for (let i=0; i< indices.length; i++){\n            let index = indices[i];\n            if (document.getElementById(\"empty_box_\"+index)){\n                document.getElementById(\"empty_box_\"+index).style.backgroundColor = color;\n            }\n            else{\n                let css = \"#empty_box_\" + index + \"{ background-color: \"+color + \" }\";\n                let style = document.createElement('style');\n    \n                style.appendChild(document.createTextNode(css));\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        }\n        \n    }\n\n    resetBoxColors(){\n        for (let i=0; i<9; i++){\n            this.displayBoxColor(i, \"black\");\n        }\n    }\n\n    changeLineColor(index, color){\n        document.getElementById(\"line_\"+index).style.backgroundColor = color;\n    }\n\n    resetLineColors(){\n        for (let i=0; i<24; i++){\n            document.getElementById(\"line_\"+i).style.backgroundColor = null;\n        }\n    }\n\n    calculateWinner(){\n        const score = this.state.score;\n        const allEqual = score.every( (val, i, arr) => val === arr[0]);\n        if (allEqual){\n            return \"Game over! It's a tie!\";\n        }\n        else{\n            const [one, two, three] = score;\n            if (one === two && one > three){\n                return \"Game over! Player 1 & 2 are tied!\";\n            }\n            else if (two === three && two > one){\n                return \"Game over! Player 2 & 3 are tied!\";\n            }\n            else if (one === three && one > two){\n                return \"Game over! Player 1 & 3 are tied!\";\n            }\n            else{\n                let winner = score.indexOf(Math.max(...score))+1;\n                return \"Game over! Player \" + winner + \" wins!\";\n            }\n        }\n        \n    }\n\n    restartGame(){\n        this.setState({\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0)\n        });\n        this.resetLineColors();\n        this.displayLineColor(this.player_color[this.state.player_turn-1]);\n        this.resetBoxColors();\n    }\n\n    render(){\n        let status = \"Player turn: \" + this.state.player_turn;\n        if (this.state.step > 24){\n            status = this.calculateWinner();\n        }\n\n        this.displayLineColor(this.player_color[this.state.player_turn-1]);\n\n        const empty_box_ids = [\n            [\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"],\n            [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"],\n            [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]\n        ]\n\n        return(\n            <div>\n                <Button text={\"Restart Game\"} onClick={this.restartGame.bind(this)}/>\n                <Board empty_box_ids={empty_box_ids} handleClick={this.handleClick.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}